name: Azure Pipelines
variables:

  azureServiceConnectionId: '09b22bb3-8da4-418b-a14e-087a777b0654'
  python.version: '3.7.6'
  vmImageName: 'myVM'
  webAppName: 'TestWebAppService'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'myTestEnvironment'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-20.04
    steps:

    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
      # Needed for Terraform VM deployment
       
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.2.7'

    - task: TerraformTaskV2@2
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-reconfigure'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'servconn'
        backendAzureRmResourceGroupName: 'azuredevops'
        backendAzureRmStorageAccountName: 'storagefree1231'
        backendAzureRmContainerName: 'mycontainer'
        backendAzureRmKey: 'terraform.tfstate'


    - task: TerraformTaskV2@2
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'servconn'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/functional_ui_test.py
      displayName: 'Upload UI Tests definition'
      artifact: drop-ui-tests

- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      vmImage: ubuntu-20.04
    environment: 'myTestEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'servconn'
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

- stage: Tests
  jobs:

  - job: Integration
    displayName: 'Integration Tests'
    pool:
      vmImage: ubuntu-20.04
    steps:

    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      
    - task: Bash@3
      displayName: 'Regression Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash
          newman run RegressionTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportRegression.xml
    - task: Bash@3
      displayName: 'Data Validation Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash
          newman run ValidationTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportValidation.xml
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/JUnitReport*.xml'
        testRunTitle: 'Publish test results'
        searchFolder: 'automatedtesting/postman'

  - job: Performance
    displayName: 'Performance Tests'
    pool:
      vmImage: 'ubuntu-20.04'
    
    steps:
    - task: JMeterInstaller@0
      displayName: 'Install JMeter 5.5'
      inputs:
        jmeterVersion: '5.5'
    
    - task: Bash@3
      displayName: 'Endurance Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/EnduranceTestSuite.jmx \
            -l endurance-test-report/endurance-results.jtl \
            -e \
            -o endurance-test-report
    - task: publishhtmlreport@1
      displayName: 'Publish Endurance Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'    

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/StressTestSuite.jmx \
            -l stress-test-report/stress-results.jtl \
            -e \
            -o stress-test-report
    - task: publishhtmlreport@1
      displayName: 'Publish Stress Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'    
        
        
    - task: Bash@3
      displayName: 'Print Performance Test Logs'
      inputs:
        targetType: 'inline'
        script: |
          ls -lah endurance-test-report/
          ls -lah stress-test-report/
          cat jmeter.log        
  - deployment: Functional
    displayName: 'Functional UI Tests'
    environment:
      name:  'myTestEnvironment'
      resourceType: VirtualMachine
      tags: myVM, packer-created-vm
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: drop-ui-tests

          - task: Bash@3

            displayName: 'Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                echo 'Hello from a custom VM with pre-installed Selenium, Chromium-browser & Chromedriver!'
                source env/bin/activate
                export PATH=$PATH:`pwd` # add chromedriver executable to path
                python3 ../drop-ui-tests/functional_ui_test.py
                cat selenium.log
